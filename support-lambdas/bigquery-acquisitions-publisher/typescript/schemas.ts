import { z } from 'zod';
import { IsoCurrencySchema } from './currencySchema';

export const ProductTypeSchema = z.enum([
	'CONTRIBUTION',
	'PRINT_SUBSCRIPTION',
	'DIGITAL_SUBSCRIPTION',
	'RECURRING_CONTRIBUTION',
	'SUPPORTER_PLUS',
	'TIER_THREE',
	'APP_PREMIUM_TIER',
	'GUARDIAN_AD_LITE',
	'FEAST_APP',
]);
export type Product = z.infer<typeof ProductTypeSchema>;

export const PaymentFrequencySchema = z.enum([
	'ONE_OFF',
	'MONTHLY',
	'QUARTERLY',
	'SIX_MONTHLY',
	'ANNUALLY',
]);
export type PaymentFrequency = z.infer<typeof PaymentFrequencySchema>;

export const IsoCountrySchema = z.enum([
	'GB',
	'US',
	'AU',
	'NZ',
	'CK',
	'CA',
	'AD',
	'AL',
	'AT',
	'BA',
	'BE',
	'BG',
	'BL',
	'CH',
	'CY',
	'CZ',
	'DE',
	'DK',
	'EE',
	'ES',
	'FI',
	'FO',
	'FR',
	'GF',
	'GL',
	'GP',
	'GR',
	'HR',
	'HU',
	'IE',
	'IT',
	'LI',
	'LT',
	'LU',
	'LV',
	'MC',
	'ME',
	'MF',
	'IS',
	'MQ',
	'MT',
	'NL',
	'NO',
	'PF',
	'PL',
	'PM',
	'PT',
	'RE',
	'RO',
	'RS',
	'SE',
	'SI',
	'SJ',
	'SK',
	'SM',
	'TF',
	'TR',
	'WF',
	'YT',
	'VA',
	'AX',
	'KI',
	'NR',
	'NF',
	'TV',
	'AE',
	'AF',
	'AG',
	'AI',
	'AM',
	'AO',
	'AQ',
	'AR',
	'AS',
	'AW',
	'AZ',
	'BB',
	'BD',
	'BF',
	'BH',
	'BI',
	'BJ',
	'BM',
	'BN',
	'BO',
	'BQ',
	'BR',
	'BS',
	'BT',
	'BV',
	'BW',
	'BY',
	'BZ',
	'CC',
	'CD',
	'CF',
	'CG',
	'CI',
	'CL',
	'CM',
	'CN',
	'CO',
	'CR',
	'CU',
	'CV',
	'CW',
	'CX',
	'DJ',
	'DM',
	'DO',
	'DZ',
	'EC',
	'EG',
	'EH',
	'ER',
	'ET',
	'FJ',
	'FM',
	'GA',
	'GD',
	'GE',
	'GH',
	'GM',
	'GN',
	'GQ',
	'GS',
	'GT',
	'GU',
	'GW',
	'GY',
	'HK',
	'HM',
	'HN',
	'HT',
	'ID',
	'IL',
	'IN',
	'IO',
	'IQ',
	'IR',
	'JM',
	'JO',
	'JP',
	'KE',
	'KG',
	'KH',
	'KM',
	'KN',
	'KP',
	'KR',
	'KW',
	'KY',
	'KZ',
	'LA',
	'LB',
	'LC',
	'LK',
	'LR',
	'LS',
	'LY',
	'MA',
	'MD',
	'MG',
	'MH',
	'MK',
	'ML',
	'MM',
	'MN',
	'MO',
	'MP',
	'MR',
	'MS',
	'MU',
	'MV',
	'MW',
	'MX',
	'MY',
	'MZ',
	'NA',
	'NC',
	'NE',
	'NG',
	'NI',
	'NP',
	'NU',
	'OM',
	'PA',
	'PE',
	'PG',
	'PH',
	'PK',
	'PN',
	'PR',
	'PS',
	'PW',
	'PY',
	'QA',
	'RU',
	'RW',
	'SA',
	'SB',
	'SC',
	'SD',
	'SG',
	'SL',
	'SN',
	'SO',
	'SR',
	'SS',
	'ST',
	'SV',
	'SX',
	'SY',
	'SZ',
	'TC',
	'TD',
	'TG',
	'TH',
	'TJ',
	'TK',
	'TL',
	'TM',
	'TN',
	'TO',
	'TT',
	'TW',
	'TZ',
	'UA',
	'UG',
	'UM',
	'UY',
	'UZ',
	'VC',
	'VE',
	'VG',
	'VI',
	'VN',
	'VU',
	'WS',
	'YE',
	'ZA',
	'ZM',
	'ZW',
	'FK',
	'GI',
	'GG',
	'IM',
	'JE',
	'SH',
]);
export type IsoCountry = z.infer<typeof IsoCountrySchema>;

export const PaymentProviderSchema = z.enum([
	'STRIPE',
	'STRIPE_APPLE_PAY',
	'STRIPE_PAYMENT_REQUEST_BUTTON',
	'STRIPE_SEPA',
	'PAYPAL',
	'GOCARDLESS',
	'IN_APP_PURCHASE',
]);
export type PaymentProvider = z.infer<typeof PaymentProviderSchema>;

const PrintProductSchema = z.enum([
	'HOME_DELIVERY_EVERYDAY',
	'HOME_DELIVERY_EVERYDAY_PLUS',
	'HOME_DELIVERY_SIXDAY',
	'HOME_DELIVERY_SIXDAY_PLUS',
	'HOME_DELIVERY_WEEKEND',
	'HOME_DELIVERY_WEEKEND_PLUS',
	'HOME_DELIVERY_SATURDAY',
	'HOME_DELIVERY_SATURDAY_PLUS',
	'HOME_DELIVERY_SUNDAY',
	'HOME_DELIVERY_SUNDAY_PLUS',
	'NATIONAL_DELIVERY_EVERYDAY',
	'NATIONAL_DELIVERY_SIXDAY',
	'NATIONAL_DELIVERY_WEEKEND',
	'VOUCHER_EVERYDAY',
	'VOUCHER_EVERYDAY_PLUS',
	'VOUCHER_SIXDAY',
	'VOUCHER_SIXDAY_PLUS',
	'VOUCHER_WEEKEND',
	'VOUCHER_WEEKEND_PLUS',
	'VOUCHER_SATURDAY',
	'VOUCHER_SATURDAY_PLUS',
	'VOUCHER_SUNDAY',
	'VOUCHER_SUNDAY_PLUS',
	'GUARDIAN_WEEKLY',
]);

export const PrintOptionsSchema = z
	.object({ product: PrintProductSchema, deliveryCountry: IsoCountrySchema })
	.nullish();
export type PrintOptions = z.infer<typeof PrintOptionsSchema>;

export const ReaderTypeSchema = z.enum(['Direct', 'Gift']);
export type ReaderType = z.infer<typeof ReaderTypeSchema>;

// This defines the schema for the data we expect to receive in the acquisition event.
// It should be kept in sync with the AcquisitionDataRow Scala case class used
// to generate the event:
// https://github.com/guardian/support-frontend/blob/main/support-modules/acquisition-events/src/main/scala/com/gu/support/acquisitions/models/AcquisitionDataRow.scala#L15
export const AcquisitionProductSchema = z.object({
	eventTimeStamp: z.string(),
	country: IsoCountrySchema,
	componentId: z.string().nullish(),
	componentType: z.string().nullish(),
	campaignCode: z.string().nullish(),
	referrerUrl: z.string().nullish(),
	abTests: z.object({ name: z.string(), variant: z.string() }).array(),
	paymentFrequency: PaymentFrequencySchema,
	paymentProvider: PaymentProviderSchema.nullish(),
	printOptions: PrintOptionsSchema,
	browserId: z.string().nullish(),
	identityId: z.string().nullish(),
	pageViewId: z.string().nullish(),
	referrerPageViewId: z.string().nullish(),
	promoCode: z.string().nullish(),
	queryParameters: z.object({ name: z.string(), value: z.string() }).array(),
	reusedExistingPaymentMethod: z.boolean(),
	acquisitionType: z.string(),
	readerType: ReaderTypeSchema,
	zuoraSubscriptionNumber: z.string().nullish(),
	contributionId: z.string().nullish(),
	paymentId: z.string().nullish(),
	product: ProductTypeSchema,
	amount: z.number().nullish(),
	currency: IsoCurrencySchema,
	source: z.string().nullish(),
	platform: z.string().nullish(),
	labels: z.string().array(),
});
export type AcquisitionProduct = z.infer<typeof AcquisitionProductSchema>;

export const AcquisitionProductEventSchema = z.object({
	detail: AcquisitionProductSchema,
});
export type AcquisitionProductEvent = z.infer<
	typeof AcquisitionProductEventSchema
>;
