Comment: Carries out the steps needed to create a Subscription or Regular Contributor
StartAt: ShouldClonePaymentMethodChoice
TimeoutSeconds: 86400
States:
  ShouldClonePaymentMethodChoice:
    Type: Choice
    Choices:
      - Variable: "$.requestInfo.accountExists"
        BooleanEquals: true
        Next: PreparePaymentMethodForReuse
    Default: CreatePaymentMethod

  PreparePaymentMethodForReuse:
    Type: Task
    Resource: "${PreparePaymentMethodForReuseLambda.Arn}"
    Next: CreateZuoraSubscription
    {{> retry}}
    {{> catch}}

  CreatePaymentMethod:
    Type: Task
    Resource: "${CreatePaymentMethodLambda.Arn}"
    Next: CreateSalesforceContact
    {{> retry}}
    {{> catch}}

  CreateSalesforceContact:
    Type: Task
    Resource: "${CreateSalesforceContactLambda.Arn}"
    Next: CreateZuoraSubscription
    {{> retry}}
    {{> catch}}

  CreateZuoraSubscription:
    Type: Task
    Resource: "${CreateZuoraSubscriptionLambda.Arn}"
    Next: ParallelTasks
    {{> retry}}
    {{> catch}}

  ParallelTasks:
    Type: Parallel
    Branches:
    - StartAt: CheckoutSuccess
      States:
        # Do not rename this step as it is used by support-frontend's polling logic.
        CheckoutSuccess:
          Type: Pass
          End: True
    - StartAt: SendThankYouEmail
      States:
        SendThankYouEmail:
          Type: Task
          Resource: "${SendThankYouEmailLambda.Arn}"
          End: True
          {{> emailRetry}}
    - StartAt: UpdateSupporterProductData
      States:
        UpdateSupporterProductData:
          Type: Task
          Resource: "${UpdateSupporterProductDataLambda.Arn}"
          End: True
          {{> retry}}
    - StartAt: SendAcquisitionEvent
      States:
        SendAcquisitionEvent:
          Type: Task
          Resource: "${SendAcquisitionEventLambda.Arn}"
          End: True
          {{> retry}}

    Next: Done

  Done:
    Type: Pass
    End: True

  FailureHandler:
    Type: Task
    Resource: "${FailureHandlerLambda.Arn}"
    Next: SucceedOrFailChoice
    {{> emailRetry}}

  SucceedOrFailChoice:
    Type: Choice
    Choices:
        # Do not trigger an alarm if the user is a test user
      - Variable: "$.requestInfo.testUser"
        BooleanEquals: true
        Next: CheckoutFailure
      - Variable: "$.requestInfo.failed"
        BooleanEquals: true
        Next: FailState
    Default: CheckoutFailure

  # Do not rename this step as it is used by support-frontend's polling logic.
  # From a user's perspective the checkout didn't work (e.g. their card wasn't accepted), but the code worked as expected
  CheckoutFailure:
    Type: Pass
    End: True

  # The Step Function failed in an unexpected way at some stage of the execution (i.e. an unknown problem with our code)
  FailState:
    Type: Fail

