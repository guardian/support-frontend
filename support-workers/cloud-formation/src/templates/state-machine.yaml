Comment: Carries out the steps needed to create a Subscription or Regular Contributor
StartAt: ShouldClonePaymentMethodChoice
TimeoutSeconds: 86400
States:
  ShouldClonePaymentMethodChoice:
    Type: Choice
    Choices:
      - Variable: "$.requestInfo.accountExists"
        BooleanEquals: true
        Next: PreparePaymentMethodForReuse
    Default: CreatePaymentMethod

  PreparePaymentMethodForReuse:
    Type: Task
    Resource: "${PreparePaymentMethodForReuseLambda.Arn}"
    Next: CreateZuoraSubscription
    {{> retry}}
    {{> catch}}

  CreatePaymentMethod:
    Type: Task
    Resource: "${CreatePaymentMethodLambda.Arn}"
    Next: CreateSalesforceContact
    {{> retry}}
    {{> catch}}

  CreateSalesforceContact:
    Type: Task
    Resource: "${CreateSalesforceContactLambda.Arn}"
    Next: CreateZuoraSubscription
    {{> retry}}
    {{> catch}}

  CreateZuoraSubscription:
    Type: Task
    Resource: "${CreateZuoraSubscriptionLambda.Arn}"
    Next: ParallelTasks
    {{> retry}}
    {{> catch}}

  ParallelTasks:
    Type: Parallel
    Branches:
    - StartAt: CheckoutSuccess
      States:
        # Do not rename this step as it is used by support-frontend's polling logic.
        CheckoutSuccess:
          Type: Pass
          End: True
    - StartAt: SendThankYouEmail
      States:
        SendThankYouEmail:
          Type: Task
          Resource: "${SendThankYouEmailLambda.Arn}"
          End: True
          {{> emailRetry}}
    - StartAt: UpdateSupporterProductData
      States:
        UpdateSupporterProductData:
          Type: Task
          Resource: "${UpdateSupporterProductDataLambda.Arn}"
          End: True
          {{> retry}}
    - StartAt: SendAcquisitionEvent
      States:
        SendAcquisitionEvent:
          Type: Task
          Resource: "${SendAcquisitionEventLambda.Arn}"
          End: True
          {{> retry}}

    # We use this step to pass through state that can then be read to three tier steps
    - StartAt: ThreeTierPassThrough
      States:
        ThreeTierPassThrough:
          Type: Pass
          End: True
    Next: ThreeTierUnpackJsonList

  # Unpack the list of states from the parallel tasks into a single item
  ThreeTierUnpackJsonList:
    Type: Pass
    InputPath: $.[0]
    Next: ThreeTierShouldCreateSupporterPlusSubscription

  ThreeTierShouldCreateSupporterPlusSubscription:
    Type: Choice
    Choices:
      - Next: ThreeTierUnpackSendThankYouEmailState
        And:
          - Variable: $.state.acquisitionData.threeTierCreateSupporterPlusSubscription
            IsPresent: true
          - Variable: $.state.acquisitionData.threeTierCreateSupporterPlusSubscription
            BooleanEquals: true
          - Variable: $.state.sendThankYouEmailState.product.productType
            IsPresent: true
          - Variable: $.state.sendThankYouEmailState.product.productType
            StringEquals: GuardianWeekly
    Default: Done

  # This transform
  # - moves state from `sendThankYouEmailState` back into the root state
  # - adds `paymentFields.billingAccountId` that's required by `PreparePaymentMethodForReuse`
  ThreeTierUnpackSendThankYouEmailState:
    Type: Pass
    Parameters:
      state:
        paymentFields:
          billingAccountId.$: $.state.sendThankYouEmailState.accountNumber
        user.$: $.state.sendThankYouEmailState.user
        product.$: $.state.sendThankYouEmailState.product
        giftRecipient.$: $.state.sendThankYouEmailState.giftRecipient
        paymentMethod.$: $.state.sendThankYouEmailState.paymentMethod
        paymentSchedule.$: $.state.sendThankYouEmailState.paymentSchedule
        promoCode.$: $.state.sendThankYouEmailState.promoCode
        accountNumber.$: $.state.sendThankYouEmailState.accountNumber
        subscriptionNumber.$: $.state.sendThankYouEmailState.subscriptionNumber
        firstDeliveryDate.$: $.state.sendThankYouEmailState.firstDeliveryDate
        productType.$: $.state.sendThankYouEmailState.productType
        requestId.$: $.state.requestId
        analyticsInfo.$: $.state.analyticsInfo
        acquisitionData.$: $.state.acquisitionData
      error.$: $.error
      requestInfo.$: $.requestInfo
    Next: ThreeTierChooseSupporterPlusProduct

  ThreeTierChooseSupporterPlusProduct:
    Type: Choice
    Default: Done
    # These choices have a Next set to the steps generated by `supporterPlusProduct` below
    # we use isUS=true as currency is the only useful discriminator, but Int and US both use USD
    Choices:
      {{> supporterPlusProductChoice currency="GBP" billingPeriod="Monthly" promoCode="3TIER_WEEKLY_UK_MONTHLY" }}
      {{> supporterPlusProductChoice currency="EUR" billingPeriod="Monthly" promoCode="3TIER_WEEKLY_EU_MONTHLY" }}
      {{> supporterPlusProductChoice currency="USD" billingPeriod="Monthly" promoCode="3TIER_WEEKLY_INT_MONTHLY" fulfilmentOptions="RestOfWorld" }}
      {{> supporterPlusProductChoice currency="USD" billingPeriod="Monthly" promoCode="3TIER_WEEKLY_US_MONTHLY" fulfilmentOptions="Domestic" }}
      {{> supporterPlusProductChoice currency="CAD" billingPeriod="Monthly" promoCode="3TIER_WEEKLY_CA_MONTHLY" }}
      {{> supporterPlusProductChoice currency="NZD" billingPeriod="Monthly" promoCode="3TIER_WEEKLY_NZ_MONTHLY" }}
      {{> supporterPlusProductChoice currency="AUD" billingPeriod="Monthly" promoCode="3TIER_WEEKLY_AU_MONTHLY" }}
      {{> supporterPlusProductChoice currency="GBP" billingPeriod="Annual" promoCode="3TIER_WEEKLY_UK_ANNUAL" }}
      {{> supporterPlusProductChoice currency="EUR" billingPeriod="Annual" promoCode="3TIER_WEEKLY_EU_ANNUAL" }}
      {{> supporterPlusProductChoice currency="USD" billingPeriod="Annual" promoCode="3TIER_WEEKLY_INT_ANNUAL" fulfilmentOptions="RestOfWorld" }}
      {{> supporterPlusProductChoice currency="USD" billingPeriod="Annual" promoCode="3TIER_WEEKLY_US_ANNUAL" fulfilmentOptions="Domestic" }}
      {{> supporterPlusProductChoice currency="CAD" billingPeriod="Annual" promoCode="3TIER_WEEKLY_CA_ANNUAL" }}
      {{> supporterPlusProductChoice currency="NZD" billingPeriod="Annual" promoCode="3TIER_WEEKLY_NZ_ANNUAL" }}
      {{> supporterPlusProductChoice currency="AUD" billingPeriod="Annual" promoCode="3TIER_WEEKLY_AU_ANNUAL" }}

  # These steps are called from the `supporterPlusProductChoice` choices above
  {{> supporterPlusProduct currency="GBP" amount=10 billingPeriod="Monthly" promoCode="3TIER_SUPPORTERPLUS_UK_MONTHLY" }}
  {{> supporterPlusProduct currency="EUR" amount=10 billingPeriod="Monthly" promoCode="3TIER_SUPPORTERPLUS_EU_MONTHLY" }}
  {{> supporterPlusProduct currency="USD" amount=13 billingPeriod="Monthly" promoCode="3TIER_SUPPORTERPLUS_INT_MONTHLY" fulfilmentOptions="RestOfWorld" }}
  {{> supporterPlusProduct currency="USD" amount=13 billingPeriod="Monthly" promoCode="3TIER_SUPPORTERPLUS_US_MONTHLY" fulfilmentOptions="Domestic" }}
  {{> supporterPlusProduct currency="CAD" amount=13 billingPeriod="Monthly" promoCode="3TIER_SUPPORTERPLUS_CA_MONTHLY" }}
  {{> supporterPlusProduct currency="NZD" amount=17 billingPeriod="Monthly" promoCode="3TIER_SUPPORTERPLUS_NZ_MONTHLY" }}
  {{> supporterPlusProduct currency="AUD" amount=17 billingPeriod="Monthly" promoCode="3TIER_SUPPORTERPLUS_AU_MONTHLY" }}
  {{> supporterPlusProduct currency="GBP" amount=95 billingPeriod="Annual" promoCode="3TIER_SUPPORTERPLUS_UK_ANNUAL" }}
  {{> supporterPlusProduct currency="EUR" amount=95 billingPeriod="Annual" promoCode="3TIER_SUPPORTERPLUS_EU_ANNUAL" }}
  {{> supporterPlusProduct currency="USD" amount=120 billingPeriod="Annual" promoCode="3TIER_SUPPORTERPLUS_INT_ANNUAL" fulfilmentOptions="RestOfWorld" }}
  {{> supporterPlusProduct currency="USD" amount=120 billingPeriod="Annual" promoCode="3TIER_SUPPORTERPLUS_US_ANNUAL" fulfilmentOptions="Domestic" }}
  {{> supporterPlusProduct currency="CAD" amount=120 billingPeriod="Annual" promoCode="3TIER_SUPPORTERPLUS_CA_ANNUAL" }}
  {{> supporterPlusProduct currency="NZD" amount=160 billingPeriod="Annual" promoCode="3TIER_SUPPORTERPLUS_NZ_ANNUAL" }}
  {{> supporterPlusProduct currency="AUD" amount=160 billingPeriod="Annual" promoCode="3TIER_SUPPORTERPLUS_AU_ANNUAL" }}

  ThreeTierPreparePaymentMethodForReuse:
    Type: Task
    Resource: "${PreparePaymentMethodForReuseLambda.Arn}"
    Next: ThreeTierCreateZuoraSubscription
    {{> retry}}
    {{> catch}}

  ThreeTierCreateZuoraSubscription:
    Type: Task
    Resource: "${CreateZuoraSubscriptionLambda.Arn}"
    Next: ParallelTasks
    {{> retry}}
    {{> catch}}

  Done:
    Type: Pass
    End: True

  FailureHandler:
    Type: Task
    Resource: "${FailureHandlerLambda.Arn}"
    Next: SucceedOrFailChoice
    {{> emailRetry}}

  SucceedOrFailChoice:
    Type: Choice
    Choices:
        # Do not trigger an alarm if the user is a test user
      - Variable: "$.requestInfo.testUser"
        BooleanEquals: true
        Next: CheckoutFailure
      - Variable: "$.requestInfo.failed"
        BooleanEquals: true
        Next: FailState
    Default: CheckoutFailure

  # Do not rename this step as it is used by support-frontend's polling logic.
  # From a user's perspective the checkout didn't work (e.g. their card wasn't accepted), but the code worked as expected
  CheckoutFailure:
    Type: Pass
    End: True

  # The Step Function failed in an unexpected way at some stage of the execution (i.e. an unknown problem with our code)
  FailState:
    Type: Fail

